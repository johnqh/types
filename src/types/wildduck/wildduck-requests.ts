/**
 * WildDuck API Request Types
 * Generated from WildDuck Joi schemas
 *
 * @fileoverview TypeScript interfaces for WildDuck API requests
 * Based on schemas from wildduck/lib/schemas and API route definitions
 */

import { Optional } from '../common';

// =============================================================================
// BASE COMMON TYPES
// =============================================================================

/** Base session and IP tracking fields used across most endpoints */
export interface BaseSessionFields {
  sess?: Optional<string>; // Session identifier (max 255 chars)
  ip?: Optional<string>; // Client IP address (IPv4/IPv6)
}

/** MongoDB ObjectId format - 24-character lowercase hex string */
export type ObjectId = string;

/** Flexible boolean supporting Y/N, true/false, 1/0, etc. */
export type FlexibleBoolean = boolean | 'Y' | 'N' | '1' | '0' | 1 | 0;

/** Metadata can be object or JSON string (max 1MB) */
export type MetaData = object | string;

/** Pagination cursor for next/previous page */
export type PageCursor = string;

// =============================================================================
// AUTHENTICATION REQUESTS
// =============================================================================

/** Pre-authentication check request */
export interface PreAuthRequest extends BaseSessionFields {
  username: string; // Username, blockchain address, ENS/SNS, or email
  scope?: Optional<'master' | 'imap' | 'smtp' | 'pop3'>; // Default: "master"
}

/** Blockchain authentication request */
export interface AuthenticateRequest extends BaseSessionFields {
  username: string; // Username, blockchain address, ENS/SNS, or email
  signature: string; // Required - Blockchain signature
  nonce: string; // Required - Unique nonce for replay protection
  message: string; // Required - SIWE/SIWS message that was signed
  signer?: Optional<string>; // The wallet address that created the signature
  protocol?: Optional<string>; // Default: "API"
  scope?: Optional<'master' | 'imap' | 'smtp' | 'pop3'>; // Default: "master"
  appId?: Optional<string>; // Optional app URL
  token?: Optional<boolean>; // Default: false - Generate access token
}

/** Authentication log query request */
export interface AuthLogRequest extends BaseSessionFields {
  user: ObjectId; // User ID (24-char hex)
  action?: Optional<string>; // Filter by action (max 100 chars)
  limit?: Optional<number>; // 1-250, default 20
  next?: Optional<PageCursor>; // Next page cursor
  previous?: Optional<PageCursor>; // Previous page cursor
  filterip?: Optional<string>; // Filter by IP address
}

// =============================================================================
// USER MANAGEMENT REQUESTS
// =============================================================================

/** Create new user request */
export interface CreateUserRequest extends BaseSessionFields {
  username: string; // Required username (dots allowed but informational)
  address?: Optional<string>; // Default email (autogenerated if not set)
  emptyAddress?: Optional<boolean>; // Default: false - Skip email generation
  language?: Optional<string>; // Language code (max 20 chars)
  retention?: Optional<number>; // Default retention time in ms (default: 0)
  name?: Optional<string>; // User display name (max 256 chars)
  targets?: Optional<string[]>; // Forwarding targets (emails or URLs)
  mtaRelay?: Optional<string>; // SMTP relay URL (smtps:// scheme)
  spamLevel?: Optional<number>; // Spam detection scale (0-100, default: 50)
  quota?: Optional<number>; // Storage quota in bytes
  recipients?: Optional<number>; // Daily recipient limit
  imapMaxConnections?: Optional<number>; // Max IMAP connections
  imapMaxDownload?: Optional<number>; // Max IMAP download per day
  pop3MaxDownload?: Optional<number>; // Max POP3 download per day
  imapMaxUpload?: Optional<number>; // Max IMAP upload per day
  pop3MaxMessages?: Optional<number>; // Max POP3 messages per session
  fromWhitelist?: Optional<string[]>; // Additional sending addresses
  tags?: Optional<string[]>; // User tags
  addTagsToAddress?: Optional<boolean>; // Add tags to default address
  uploadSentMessages?: Optional<boolean>; // Upload sent messages to Sent folder
  mailboxes?: Optional<object>; // Custom mailbox settings
  featureFlags?: Optional<string[]>; // Feature flags
  requirePasswordChange?: Optional<boolean>; // Force password change
  encryptMessages?: Optional<boolean>; // Encrypt messages
  encryptForwarded?: Optional<boolean>; // Encrypt forwarded messages
  pubKey?: Optional<string>; // OpenPGP public key
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
}

/** Update existing user request */
export interface UpdateUserRequest extends BaseSessionFields {
  language?: Optional<string>; // Language code (max 20 chars)
  name?: Optional<string>; // User display name (max 256 chars)
  targets?: Optional<string[]>; // Forwarding targets array
  mtaRelay?: Optional<string>; // SMTP relay URL
  spamLevel?: Optional<number>; // Spam detection (0-100)
  uploadSentMessages?: Optional<boolean>; // Upload sent to Sent folder
  fromWhitelist?: Optional<string[]>; // Additional From addresses
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
  tags?: Optional<string[]>; // User tags
  retention?: Optional<number>; // Message retention time
  quota?: Optional<number>; // Storage quota
  recipients?: Optional<number>; // Daily recipient limit
  imapMaxConnections?: Optional<number>;
  imapMaxDownload?: Optional<number>;
  pop3MaxDownload?: Optional<number>;
  imapMaxUpload?: Optional<number>;
  pop3MaxMessages?: Optional<number>;
  encryptMessages?: Optional<boolean>;
  encryptForwarded?: Optional<boolean>;
  pubKey?: Optional<string>; // OpenPGP public key
  disabledScopes?: Optional<string[]>; // Disabled access scopes
  featureFlags?: Optional<string[]>; // Feature flags
}

/** User logout request */
export interface LogoutUserRequest extends BaseSessionFields {
  reason?: Optional<string>; // Message for IMAP clients (max 128 chars)
}

/** Quota recalculation request */
export interface RecalculateQuotaRequest extends BaseSessionFields {
  // No additional fields - just session tracking
}

// =============================================================================
// MAILBOX OPERATIONS REQUESTS
// =============================================================================

/** Create new mailbox request */
export interface CreateMailboxRequest extends BaseSessionFields {
  path: string; // Required - Full mailbox path (folders separated by /)
  hidden?: Optional<boolean>; // Default: false - Hidden from IMAP
  retention?: Optional<number>; // Message retention in ms (0 = disabled)
  encryptMessages?: Optional<boolean>; // Default: false - Encrypt messages
}

/** Update existing mailbox request */
export interface UpdateMailboxRequest extends BaseSessionFields {
  path?: Optional<string>; // New path to rename mailbox
  retention?: Optional<number>; // Message retention in ms
  subscribed?: Optional<boolean>; // IMAP subscription state
  encryptMessages?: Optional<boolean>; // Message encryption
  hidden?: Optional<boolean>; // Hidden from IMAP
}

// =============================================================================
// MESSAGE OPERATIONS REQUESTS
// =============================================================================

/** Email address with optional display name */
export interface AddressWithName {
  name?: Optional<string>; // Display name (max 255 chars)
  address: string; // Required email address
}

/** Custom email header */
export interface EmailHeader {
  key: string; // Header name (max 255 chars)
  value: string; // Header value (max 100KB)
}

/** Email attachment */
export interface EmailAttachment {
  filename?: Optional<string>; // Filename (max 255 chars)
  contentType?: Optional<string>; // MIME type (max 255 chars)
  encoding?: Optional<string>; // Default: "base64"
  contentTransferEncoding?: Optional<string>; // Transfer encoding
  content: string; // Required - Base64 encoded content
  cid?: Optional<string>; // Content-ID for inline images (max 255 chars)
  contentDisposition?: Optional<'inline' | 'attachment'>; // Content disposition
}

/** Reference to existing message for reply/forward */
export interface MessageReference {
  mailbox: ObjectId; // Mailbox ID (24-char hex)
  id: number; // Message ID
  action: 'reply' | 'replyAll' | 'forward'; // Reference action
}

/** BIMI configuration */
export interface BimiConfig {
  domain: string; // Required - Domain for BIMI record
  selector?: Optional<string>; // Optional BIMI selector (max 255 chars)
}

/** Submit new message request (email sending) */
export interface SubmitMessageRequest extends BaseSessionFields {
  mailbox?: Optional<ObjectId>; // Mailbox ID (24-char hex)
  from?: Optional<AddressWithName>; // From address
  replyTo?: Optional<AddressWithName>; // Reply-To address
  to?: Optional<AddressWithName[]>; // To addresses
  cc?: Optional<AddressWithName[]>; // CC addresses
  bcc?: Optional<AddressWithName[]>; // BCC addresses
  headers?: Optional<EmailHeader[]>; // Custom headers
  subject?: Optional<string>; // Subject (max 2KB)
  text?: Optional<string>; // Plaintext content (max 1MB)
  html?: Optional<string>; // HTML content (max 1MB)
  attachments?: Optional<EmailAttachment[]>; // File attachments
  meta?: Optional<MetaData>; // Metadata
  reference?: Optional<MessageReference>; // Reply/forward reference
  sendTime?: Optional<Date>; // Scheduled send time
  deliveryReport?: Optional<boolean>; // Request delivery report
  bimi?: Optional<BimiConfig>; // BIMI configuration
}

/** Blockchain-authenticated message submission */
export interface IndexerSubmitRequest extends SubmitMessageRequest {
  authentication: {
    message: string; // Required - Message that was signed
    signature: string; // Required - Cryptographic signature
  };
}

/** Submit stored message (draft) request */
export interface SubmitStoredMessageRequest extends BaseSessionFields {
  deleteFiles?: Optional<boolean>; // Delete attachment files from metadata
  sendTime?: Optional<Date>; // Scheduled delivery time
}

/** Search and update messages request */
export interface SearchUpdateMessagesRequest extends BaseSessionFields {
  query?: Optional<object>; // Search query object
  action?: Optional<object>; // Action to apply to matching messages
}

// =============================================================================
// ADDRESS MANAGEMENT REQUESTS
// =============================================================================

/** Create user address request */
export interface CreateUserAddressRequest extends BaseSessionFields {
  address: string; // Email address or special pattern (*@domain, user@*)
  name?: Optional<string>; // Identity name (max 128 chars)
  main?: Optional<boolean>; // Is default address for user
  allowWildcard?: Optional<boolean>; // Allow wildcard patterns
  tags?: Optional<string[]>; // Associated tags (max 128 chars each)
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
}

/** Update user address request */
export interface UpdateUserAddressRequest extends BaseSessionFields {
  name?: Optional<string>; // Identity name (max 128 chars)
  address?: Optional<string>; // New email address (no wildcards)
  main?: Optional<boolean>; // Set as default address
  tags?: Optional<string[]>; // Associated tags
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
}

/** Auto-reply configuration */
export interface AutoreplyConfig {
  status?: Optional<boolean>; // Default: true - Enable auto-reply
  start?: Optional<Date | false>; // Start time or false to disable
  end?: Optional<Date | false>; // End time or false to disable
  name?: Optional<string>; // From name (max 128 chars)
  subject?: Optional<string>; // Subject line (max 2KB)
  text?: Optional<string>; // Plaintext content (max 128KB)
  html?: Optional<string>; // HTML content (max 128KB)
}

/** Create forwarded address request */
export interface CreateForwardedAddressRequest extends BaseSessionFields {
  address: string; // Required - Email or wildcard pattern
  name?: Optional<string>; // Identity name (max 128 chars)
  targets?: Optional<string[]>; // Forwarding targets (emails or URLs)
  forwards?: Optional<number>; // Daily forwarding limit (default: 0)
  allowWildcard?: Optional<boolean>; // Allow wildcard patterns
  autoreply?: Optional<AutoreplyConfig>; // Auto-reply configuration
  tags?: Optional<string[]>; // Associated tags
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
}

/** Update forwarded address request */
export interface UpdateForwardedAddressRequest extends BaseSessionFields {
  address?: Optional<string>; // New email address (no wildcards)
  name?: Optional<string>; // Identity name (max 128 chars)
  targets?: Optional<string[]>; // Forwarding targets (overwrites existing)
  forwards?: Optional<number>; // Daily forwarding limit
  autoreply?: Optional<AutoreplyConfig>; // Auto-reply configuration
  tags?: Optional<string[]>; // Associated tags
  metaData?: Optional<MetaData>; // Optional metadata
  internalData?: Optional<MetaData>; // Internal metadata (admin only)
  forwardedDisabled?: Optional<boolean>; // Disable forwarding
}

/** Rename domain request */
export interface RenameDomainRequest extends BaseSessionFields {
  oldDomain: string; // Required - Current domain name
  newDomain: string; // Required - New domain name
}

// =============================================================================
// FILTER REQUESTS
// =============================================================================

/** Message filter query conditions */
export interface FilterQuery {
  from?: Optional<string>; // Partial From header match (max 255 chars)
  to?: Optional<string>; // Partial To/Cc header match (max 255 chars)
  subject?: Optional<string>; // Partial Subject match (max 255 chars)
  listId?: Optional<string>; // Partial List-ID match (max 255 chars)
  text?: Optional<string>; // Fulltext search (max 255 chars)
  ha?: Optional<boolean>; // Has attachment requirement
  size?: Optional<number>; // Message size filter (+ = larger, - = smaller)
}

/** Actions to take on filtered messages */
export interface FilterAction {
  seen?: Optional<boolean>; // Mark as seen
  flag?: Optional<boolean>; // Mark as flagged
  delete?: Optional<boolean>; // Delete message
  spam?: Optional<boolean>; // Move to spam folder
  mailbox?: Optional<ObjectId>; // Move to specific mailbox (24-char hex ID)
  targets?: Optional<string[]>; // Forward to addresses or URLs
}

/** Create message filter request */
export interface CreateFilterRequest extends BaseSessionFields {
  name?: Optional<string>; // Filter name (max 255 chars)
  query: FilterQuery; // Required - Message matching rules
  action: FilterAction; // Required - Actions to take
  disabled?: Optional<boolean>; // Default: false - Disable filter
  metaData?: Optional<MetaData>; // Optional metadata
}

/** Update message filter request */
export interface UpdateFilterRequest extends BaseSessionFields {
  name?: Optional<string>; // Filter name (max 255 chars)
  query?: Optional<FilterQuery>; // Message matching rules
  action?: Optional<FilterAction>; // Actions to take
  disabled?: Optional<boolean>; // Disable filter
  metaData?: Optional<MetaData>; // Optional metadata
}

// =============================================================================
// PAGINATION AND QUERY REQUESTS
// =============================================================================

/** Base pagination parameters */
export interface PaginationRequest {
  limit?: Optional<number>; // Page size (1-250, default 20)
  page?: Optional<number>; // Page number (default 1)
  next?: Optional<PageCursor>; // Next page cursor
  previous?: Optional<PageCursor>; // Previous page cursor
}

/** Get mailboxes request */
export interface GetMailboxesRequest
  extends BaseSessionFields,
    PaginationRequest {
  specialUse?: Optional<boolean>; // Include special use flags
  showHidden?: Optional<boolean>; // Include hidden mailboxes
  counters?: Optional<boolean>; // Include message counts
  sizes?: Optional<boolean>; // Include size information
}

/** Get messages request */
export interface GetMessagesRequest
  extends BaseSessionFields,
    PaginationRequest {
  order?: Optional<'asc' | 'desc'>; // Sort order
  unseen?: Optional<boolean>; // Filter unseen messages
  flagged?: Optional<boolean>; // Filter flagged messages
  thread?: Optional<ObjectId>; // Thread ID filter
  includeHeaders?: Optional<string[]>; // Include specific headers
  uid?: Optional<boolean>; // Use UID instead of sequence numbers
}

/** Get addresses request */
export interface GetAddressesRequest
  extends BaseSessionFields,
    PaginationRequest {
  tags?: Optional<string[]>; // Filter by tags
  requiredTags?: Optional<string[]>; // Required tags filter
}

/** Get users request */
export interface GetUsersRequest extends BaseSessionFields, PaginationRequest {
  query?: Optional<string>; // Search query
  tags?: Optional<string[]>; // Filter by tags
  requiredTags?: Optional<string[]>; // Required tags filter
}

// =============================================================================
// UTILITY TYPES
// =============================================================================

/** Union type for all WildDuck request types */
export type WildDuckRequest =
  | PreAuthRequest
  | AuthenticateRequest
  | AuthLogRequest
  | CreateUserRequest
  | UpdateUserRequest
  | LogoutUserRequest
  | RecalculateQuotaRequest
  | CreateMailboxRequest
  | UpdateMailboxRequest
  | SubmitMessageRequest
  | IndexerSubmitRequest
  | SubmitStoredMessageRequest
  | SearchUpdateMessagesRequest
  | CreateUserAddressRequest
  | UpdateUserAddressRequest
  | CreateForwardedAddressRequest
  | UpdateForwardedAddressRequest
  | RenameDomainRequest
  | CreateFilterRequest
  | UpdateFilterRequest
  | GetMailboxesRequest
  | GetMessagesRequest
  | GetAddressesRequest
  | GetUsersRequest;

/** Type guard to check if an object is a WildDuck request */
export function isWildDuckRequest(obj: unknown): obj is WildDuckRequest {
  return typeof obj === 'object' && obj !== null;
}

// =============================================================================
// REQUEST BUILDERS (Helper functions)
// =============================================================================

/** Create a pre-auth request with defaults */
export function createPreAuthRequest(
  username: string,
  options?: Partial<PreAuthRequest>
): PreAuthRequest {
  return {
    username,
    scope: 'master',
    sess: null,
    ip: null,
    ...options,
  };
}

/** Create an authenticate request with required fields */
export function createAuthenticateRequest(
  username: string,
  signature: string,
  nonce: string,
  message: string,
  options?: Partial<AuthenticateRequest>
): AuthenticateRequest {
  return {
    username,
    signature,
    nonce,
    message,
    protocol: 'API',
    scope: 'master',
    appId: null,
    token: false,
    sess: null,
    ip: null,
    ...options,
  };
}

/** Create a submit message request with defaults */
export function createSubmitMessageRequest(
  options: Partial<SubmitMessageRequest>
): SubmitMessageRequest {
  return {
    sess: null,
    ip: null,
    mailbox: null,
    from: null,
    replyTo: null,
    to: null,
    cc: null,
    bcc: null,
    headers: null,
    subject: null,
    text: null,
    html: null,
    attachments: null,
    meta: null,
    reference: null,
    sendTime: null,
    deliveryReport: false,
    bimi: null,
    ...options,
  };
}

/** Create a create mailbox request */
export function createCreateMailboxRequest(
  path: string,
  options?: Partial<CreateMailboxRequest>
): CreateMailboxRequest {
  return {
    path,
    hidden: false,
    retention: null,
    encryptMessages: false,
    sess: null,
    ip: null,
    ...options,
  };
}

/** Create pagination request with defaults */
export function createPaginationRequest(
  options?: Partial<PaginationRequest>
): PaginationRequest {
  return {
    limit: 20,
    page: 1,
    next: null,
    previous: null,
    ...options,
  };
}
