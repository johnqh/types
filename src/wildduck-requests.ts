/**
 * WildDuck API Request Types
 * Generated from WildDuck Joi schemas
 *
 * @fileoverview TypeScript interfaces for WildDuck API requests
 * Based on schemas from wildduck/lib/schemas and API route definitions
 */

// =============================================================================
// BASE COMMON TYPES
// =============================================================================

/** Base session and IP tracking fields used across most endpoints */
export interface BaseSessionFields {
  sess?: string; // Session identifier (max 255 chars)
  ip?: string; // Client IP address (IPv4/IPv6)
}

/** MongoDB ObjectId format - 24-character lowercase hex string */
export type ObjectId = string;

/** Flexible boolean supporting Y/N, true/false, 1/0, etc. */
export type FlexibleBoolean = boolean | 'Y' | 'N' | '1' | '0' | 1 | 0;

/** Metadata can be object or JSON string (max 1MB) */
export type MetaData = object | string;

/** Pagination cursor for next/previous page */
export type PageCursor = string;

// =============================================================================
// AUTHENTICATION REQUESTS
// =============================================================================

/** Pre-authentication check request */
export interface PreAuthRequest extends BaseSessionFields {
  username: string; // Username, blockchain address, ENS/SNS, or email
  scope?: 'master' | 'imap' | 'smtp' | 'pop3'; // Default: "master"
}

/** Blockchain authentication request */
export interface AuthenticateRequest extends BaseSessionFields {
  username: string; // Username, blockchain address, ENS/SNS, or email
  signature: string; // Required - Blockchain signature
  nonce: string; // Required - Unique nonce for replay protection
  message: string; // Required - SIWE/SIWS message that was signed
  protocol?: string; // Default: "API"
  scope?: 'master' | 'imap' | 'smtp' | 'pop3'; // Default: "master"
  appId?: string; // Optional app URL
  token?: boolean; // Default: false - Generate access token
}

/** Authentication log query request */
export interface AuthLogRequest extends BaseSessionFields {
  user: ObjectId; // User ID (24-char hex)
  action?: string; // Filter by action (max 100 chars)
  limit?: number; // 1-250, default 20
  next?: PageCursor; // Next page cursor
  previous?: PageCursor; // Previous page cursor
  filterip?: string; // Filter by IP address
}

// =============================================================================
// USER MANAGEMENT REQUESTS
// =============================================================================

/** Create new user request */
export interface CreateUserRequest extends BaseSessionFields {
  username: string; // Required username (dots allowed but informational)
  address?: string; // Default email (autogenerated if not set)
  emptyAddress?: boolean; // Default: false - Skip email generation
  language?: string; // Language code (max 20 chars)
  retention?: number; // Default retention time in ms (default: 0)
  name?: string; // User display name (max 256 chars)
  targets?: string[]; // Forwarding targets (emails or URLs)
  mtaRelay?: string; // SMTP relay URL (smtps:// scheme)
  spamLevel?: number; // Spam detection scale (0-100, default: 50)
  quota?: number; // Storage quota in bytes
  recipients?: number; // Daily recipient limit
  imapMaxConnections?: number; // Max IMAP connections
  imapMaxDownload?: number; // Max IMAP download per day
  pop3MaxDownload?: number; // Max POP3 download per day
  imapMaxUpload?: number; // Max IMAP upload per day
  pop3MaxMessages?: number; // Max POP3 messages per session
  fromWhitelist?: string[]; // Additional sending addresses
  tags?: string[]; // User tags
  addTagsToAddress?: boolean; // Add tags to default address
  uploadSentMessages?: boolean; // Upload sent messages to Sent folder
  mailboxes?: object; // Custom mailbox settings
  featureFlags?: string[]; // Feature flags
  requirePasswordChange?: boolean; // Force password change
  encryptMessages?: boolean; // Encrypt messages
  encryptForwarded?: boolean; // Encrypt forwarded messages
  pubKey?: string; // OpenPGP public key
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
}

/** Update existing user request */
export interface UpdateUserRequest extends BaseSessionFields {
  language?: string; // Language code (max 20 chars)
  name?: string; // User display name (max 256 chars)
  targets?: string[]; // Forwarding targets array
  mtaRelay?: string; // SMTP relay URL
  spamLevel?: number; // Spam detection (0-100)
  uploadSentMessages?: boolean; // Upload sent to Sent folder
  fromWhitelist?: string[]; // Additional From addresses
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
  tags?: string[]; // User tags
  retention?: number; // Message retention time
  quota?: number; // Storage quota
  recipients?: number; // Daily recipient limit
  imapMaxConnections?: number;
  imapMaxDownload?: number;
  pop3MaxDownload?: number;
  imapMaxUpload?: number;
  pop3MaxMessages?: number;
  encryptMessages?: boolean;
  encryptForwarded?: boolean;
  pubKey?: string; // OpenPGP public key
  disabledScopes?: string[]; // Disabled access scopes
  featureFlags?: string[]; // Feature flags
}

/** User logout request */
export interface LogoutUserRequest extends BaseSessionFields {
  reason?: string; // Message for IMAP clients (max 128 chars)
}

/** Quota recalculation request */
export interface RecalculateQuotaRequest extends BaseSessionFields {
  // No additional fields - just session tracking
}

// =============================================================================
// MAILBOX OPERATIONS REQUESTS
// =============================================================================

/** Create new mailbox request */
export interface CreateMailboxRequest extends BaseSessionFields {
  path: string; // Required - Full mailbox path (folders separated by /)
  hidden?: boolean; // Default: false - Hidden from IMAP
  retention?: number; // Message retention in ms (0 = disabled)
  encryptMessages?: boolean; // Default: false - Encrypt messages
}

/** Update existing mailbox request */
export interface UpdateMailboxRequest extends BaseSessionFields {
  path?: string; // New path to rename mailbox
  retention?: number; // Message retention in ms
  subscribed?: boolean; // IMAP subscription state
  encryptMessages?: boolean; // Message encryption
  hidden?: boolean; // Hidden from IMAP
}

// =============================================================================
// MESSAGE OPERATIONS REQUESTS
// =============================================================================

/** Email address with optional display name */
export interface AddressWithName {
  name?: string; // Display name (max 255 chars)
  address: string; // Required email address
}

/** Custom email header */
export interface EmailHeader {
  key: string; // Header name (max 255 chars)
  value: string; // Header value (max 100KB)
}

/** Email attachment */
export interface EmailAttachment {
  filename?: string; // Filename (max 255 chars)
  contentType?: string; // MIME type (max 255 chars)
  encoding?: string; // Default: "base64"
  contentTransferEncoding?: string; // Transfer encoding
  content: string; // Required - Base64 encoded content
  cid?: string; // Content-ID for inline images (max 255 chars)
  contentDisposition?: 'inline' | 'attachment'; // Content disposition
}

/** Reference to existing message for reply/forward */
export interface MessageReference {
  mailbox: ObjectId; // Mailbox ID (24-char hex)
  id: number; // Message ID
  action: 'reply' | 'replyAll' | 'forward'; // Reference action
}

/** BIMI configuration */
export interface BimiConfig {
  domain: string; // Required - Domain for BIMI record
  selector?: string; // Optional BIMI selector (max 255 chars)
}

/** Submit new message request (email sending) */
export interface SubmitMessageRequest extends BaseSessionFields {
  mailbox?: ObjectId; // Mailbox ID (24-char hex)
  from?: AddressWithName; // From address
  replyTo?: AddressWithName; // Reply-To address
  to?: AddressWithName[]; // To addresses
  cc?: AddressWithName[]; // CC addresses
  bcc?: AddressWithName[]; // BCC addresses
  headers?: EmailHeader[]; // Custom headers
  subject?: string; // Subject (max 2KB)
  text?: string; // Plaintext content (max 1MB)
  html?: string; // HTML content (max 1MB)
  attachments?: EmailAttachment[]; // File attachments
  meta?: MetaData; // Metadata
  reference?: MessageReference; // Reply/forward reference
  sendTime?: Date; // Scheduled send time
  deliveryReport?: boolean; // Request delivery report
  bimi?: BimiConfig; // BIMI configuration
}

/** Blockchain-authenticated message submission */
export interface IndexerSubmitRequest extends SubmitMessageRequest {
  authentication: {
    message: string; // Required - Message that was signed
    signature: string; // Required - Cryptographic signature
  };
}

/** Submit stored message (draft) request */
export interface SubmitStoredMessageRequest extends BaseSessionFields {
  deleteFiles?: boolean; // Delete attachment files from metadata
  sendTime?: Date; // Scheduled delivery time
}

/** Search and update messages request */
export interface SearchUpdateMessagesRequest extends BaseSessionFields {
  query?: object; // Search query object
  action?: object; // Action to apply to matching messages
}

// =============================================================================
// ADDRESS MANAGEMENT REQUESTS
// =============================================================================

/** Create user address request */
export interface CreateUserAddressRequest extends BaseSessionFields {
  address: string; // Email address or special pattern (*@domain, user@*)
  name?: string; // Identity name (max 128 chars)
  main?: boolean; // Is default address for user
  allowWildcard?: boolean; // Allow wildcard patterns
  tags?: string[]; // Associated tags (max 128 chars each)
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
}

/** Update user address request */
export interface UpdateUserAddressRequest extends BaseSessionFields {
  name?: string; // Identity name (max 128 chars)
  address?: string; // New email address (no wildcards)
  main?: boolean; // Set as default address
  tags?: string[]; // Associated tags
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
}

/** Auto-reply configuration */
export interface AutoreplyConfig {
  status?: boolean; // Default: true - Enable auto-reply
  start?: Date | false; // Start time or false to disable
  end?: Date | false; // End time or false to disable
  name?: string; // From name (max 128 chars)
  subject?: string; // Subject line (max 2KB)
  text?: string; // Plaintext content (max 128KB)
  html?: string; // HTML content (max 128KB)
}

/** Create forwarded address request */
export interface CreateForwardedAddressRequest extends BaseSessionFields {
  address: string; // Required - Email or wildcard pattern
  name?: string; // Identity name (max 128 chars)
  targets?: string[]; // Forwarding targets (emails or URLs)
  forwards?: number; // Daily forwarding limit (default: 0)
  allowWildcard?: boolean; // Allow wildcard patterns
  autoreply?: AutoreplyConfig; // Auto-reply configuration
  tags?: string[]; // Associated tags
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
}

/** Update forwarded address request */
export interface UpdateForwardedAddressRequest extends BaseSessionFields {
  address?: string; // New email address (no wildcards)
  name?: string; // Identity name (max 128 chars)
  targets?: string[]; // Forwarding targets (overwrites existing)
  forwards?: number; // Daily forwarding limit
  autoreply?: AutoreplyConfig; // Auto-reply configuration
  tags?: string[]; // Associated tags
  metaData?: MetaData; // Optional metadata
  internalData?: MetaData; // Internal metadata (admin only)
  forwardedDisabled?: boolean; // Disable forwarding
}

/** Rename domain request */
export interface RenameDomainRequest extends BaseSessionFields {
  oldDomain: string; // Required - Current domain name
  newDomain: string; // Required - New domain name
}

// =============================================================================
// FILTER REQUESTS
// =============================================================================

/** Message filter query conditions */
export interface FilterQuery {
  from?: string; // Partial From header match (max 255 chars)
  to?: string; // Partial To/Cc header match (max 255 chars)
  subject?: string; // Partial Subject match (max 255 chars)
  listId?: string; // Partial List-ID match (max 255 chars)
  text?: string; // Fulltext search (max 255 chars)
  ha?: boolean; // Has attachment requirement
  size?: number; // Message size filter (+ = larger, - = smaller)
}

/** Actions to take on filtered messages */
export interface FilterAction {
  seen?: boolean; // Mark as seen
  flag?: boolean; // Mark as flagged
  delete?: boolean; // Delete message
  spam?: boolean; // Move to spam folder
  mailbox?: ObjectId; // Move to specific mailbox (24-char hex ID)
  targets?: string[]; // Forward to addresses or URLs
}

/** Create message filter request */
export interface CreateFilterRequest extends BaseSessionFields {
  name?: string; // Filter name (max 255 chars)
  query: FilterQuery; // Required - Message matching rules
  action: FilterAction; // Required - Actions to take
  disabled?: boolean; // Default: false - Disable filter
  metaData?: MetaData; // Optional metadata
}

/** Update message filter request */
export interface UpdateFilterRequest extends BaseSessionFields {
  name?: string; // Filter name (max 255 chars)
  query?: FilterQuery; // Message matching rules
  action?: FilterAction; // Actions to take
  disabled?: boolean; // Disable filter
  metaData?: MetaData; // Optional metadata
}

// =============================================================================
// PAGINATION AND QUERY REQUESTS
// =============================================================================

/** Base pagination parameters */
export interface PaginationRequest {
  limit?: number; // Page size (1-250, default 20)
  page?: number; // Page number (default 1)
  next?: PageCursor; // Next page cursor
  previous?: PageCursor; // Previous page cursor
}

/** Get mailboxes request */
export interface GetMailboxesRequest
  extends BaseSessionFields,
    PaginationRequest {
  specialUse?: boolean; // Include special use flags
  showHidden?: boolean; // Include hidden mailboxes
  counters?: boolean; // Include message counts
  sizes?: boolean; // Include size information
}

/** Get messages request */
export interface GetMessagesRequest
  extends BaseSessionFields,
    PaginationRequest {
  order?: 'asc' | 'desc'; // Sort order
  unseen?: boolean; // Filter unseen messages
  flagged?: boolean; // Filter flagged messages
  thread?: ObjectId; // Thread ID filter
  includeHeaders?: string[]; // Include specific headers
  uid?: boolean; // Use UID instead of sequence numbers
}

/** Get addresses request */
export interface GetAddressesRequest
  extends BaseSessionFields,
    PaginationRequest {
  tags?: string[]; // Filter by tags
  requiredTags?: string[]; // Required tags filter
}

/** Get users request */
export interface GetUsersRequest extends BaseSessionFields, PaginationRequest {
  query?: string; // Search query
  tags?: string[]; // Filter by tags
  requiredTags?: string[]; // Required tags filter
}

// =============================================================================
// UTILITY TYPES
// =============================================================================

/** Union type for all WildDuck request types */
export type WildDuckRequest =
  | PreAuthRequest
  | AuthenticateRequest
  | AuthLogRequest
  | CreateUserRequest
  | UpdateUserRequest
  | LogoutUserRequest
  | RecalculateQuotaRequest
  | CreateMailboxRequest
  | UpdateMailboxRequest
  | SubmitMessageRequest
  | IndexerSubmitRequest
  | SubmitStoredMessageRequest
  | SearchUpdateMessagesRequest
  | CreateUserAddressRequest
  | UpdateUserAddressRequest
  | CreateForwardedAddressRequest
  | UpdateForwardedAddressRequest
  | RenameDomainRequest
  | CreateFilterRequest
  | UpdateFilterRequest
  | GetMailboxesRequest
  | GetMessagesRequest
  | GetAddressesRequest
  | GetUsersRequest;

/** Type guard to check if an object is a WildDuck request */
export function isWildDuckRequest(obj: unknown): obj is WildDuckRequest {
  return typeof obj === 'object' && obj !== null;
}

// =============================================================================
// REQUEST BUILDERS (Helper functions)
// =============================================================================

/** Create a pre-auth request with defaults */
export function createPreAuthRequest(
  username: string,
  options?: Partial<PreAuthRequest>
): PreAuthRequest {
  return {
    username,
    scope: 'master',
    ...options,
  };
}

/** Create an authenticate request with required fields */
export function createAuthenticateRequest(
  username: string,
  signature: string,
  nonce: string,
  message: string,
  options?: Partial<AuthenticateRequest>
): AuthenticateRequest {
  return {
    username,
    signature,
    nonce,
    message,
    protocol: 'API',
    scope: 'master',
    token: false,
    ...options,
  };
}

/** Create a submit message request with defaults */
export function createSubmitMessageRequest(
  options: Partial<SubmitMessageRequest>
): SubmitMessageRequest {
  return {
    deliveryReport: false,
    ...options,
  };
}

/** Create a create mailbox request */
export function createCreateMailboxRequest(
  path: string,
  options?: Partial<CreateMailboxRequest>
): CreateMailboxRequest {
  return {
    path,
    hidden: false,
    encryptMessages: false,
    ...options,
  };
}

/** Create pagination request with defaults */
export function createPaginationRequest(
  options?: Partial<PaginationRequest>
): PaginationRequest {
  return {
    limit: 20,
    page: 1,
    ...options,
  };
}
